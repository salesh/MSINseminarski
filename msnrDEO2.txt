\documentclass{article}
\usepackage[utf8]{inputenc}

\begin{document}

\maketitle

\section{Introduction}

Softverski sistemi postaju sve više kompleksniji i sve više se izvršavaju u okruženjima gde je bezbednost od izuzetne važnosti, na primer sistemi za pomoć pri upravljanju vozilom. Stoga kvalitet softvera je vrlo bitna stavka kod automobilskih softverskih sistema. Testiranje softvera je jedna od najbitnijih stavki prilikom razvoja softvera za automobile. Bilo kakve greške na softveru koje se ne otkriju prilikom testiranja, mogu da izazovu ogromne finansijske probleme i čak da rizikuju ljudske živote.

Proces testiranja softvera je, prema Spillner i Linz, podeljen u pet faza, kao što je prikazano u figuri 1. Počinje se sa fazom planiranja. Koncept testa i plan testa su definisani u ovoj fazi. Resursi moraju biti raspoređeni i ciljevi svakog testa moraju biti definisani. Posle početnog planiranja, sledi faza analize i dizajna. U toj fazi svi slučajevi se opisuju na apstraktan način i definišu se prema specifikaciji softvera. Nakon toga svi test slučajevi se moraju implementirati, dalje se vrši odabir testova, pokreću se na sistemu za testiranje, ručno ili automatski. Kada se izvršavanje testova završi, rezultati se sakupljaju i dokumentuju za dalju analizu. Osoba odgovorna za projekat mora da odluči koji su dalji testovi neophodni. Ovo se može utvrditi na primer, posmatranjem učestalosti dešavanja kvarova i popravki na sistemu. Novi testovi se izvršavaju ako je to potrebno.

Generalno testiranje je u velikoj meri ograničeno resursima stoga je cilj da testiranje bude efikasnije i da u isto vreme bude i efektivnije. U automobilskom softverskom testiranju, postoje posebni izazovi. Prvo, u automobilskoj industriji postoji posebna veza između proizvođača, dobavljača i testera. Pošto su softverske komponente obično razvijene od strane dobavljača i testirane lokalno, integraciju obavlja proizvođač ili je izvršena od strane drugog dobavljača. Usled ugovorenih ograničenja, izvorni kod nije dostupan za integraciono i sistemsko testiranje. To dovodi do metode testiranja crnom kutijom gde je testiranje zasnovano na specifikaciji sistema. Drugo, proizvodi testiranja su često naznačeni u prirodnom jeziku \cite{ref20}. Ovo otežava pravljenje pretpostavki u vezi progresa testiranja i pokrivenosti sistema na kome se testira i automatizacije izbora test slučaja i njihovog izvršavanja. Treće, u većini slučajeva, svi naznačeni test slučajevi ne mogu biti izvršeni zbog ograničenja resursa. Stoga, mora biti izabran podskup test slucajeva. Ovo je veoma kritičan zadatak, pošto nije jednostavno da se izabere pravi test slučaj, koji će čverovatno uočiti grešku. U metodi testiranja crnom kutijom, koja je greška za automobilske softvere i sisteme, izvorni kod nije dostupan. To dovodi do nedostatka popularne pokrivensti koda. Umesto toga, drugi heuristike moraju da budu uvedene u automobilsko područije za izbor test slučajeva. Četvrto, u automobilskom softverskom razvoju, dosta pod-procesa od celokupnog procesa testiranja se izvršavaju ručno. Automatizacija testiranja procesa, uključujući izbor i prioritet test slučaja, je željeni cilj, pošto može da smanji napor testiranja u poređenju na ručno izvršenje\cite{ref16}.

Kako bi automobilsko softversko testiranje napravili više efikasnim, u ovom papiru, predstavićemo šest različitih izazova testiranja i prema rešenjima u automobilskom razvoju softvera uzimajući u obzir određena ograničenja i izazove u ovom područiju. Ovaj pristup pokriva test slučajeve u prirodnom jeziku, automobilizaciju izbora i prioritizacija test slučaja. Prikazaćemo zadati koncept pomoću primera, Body Comfort System \cite{ref17}.
  
Analiza i dizajn
U ovoj fazi glavni zadatak je kreiranje slučajeva za testiranje, kako to predstavlja osnos samog procesa testiranja. Ova faza je važna za bilo koju formu testiranja, kako se u njoj definiše koje informacije su dostupne i kako im pristupiti prilikom testiranja. Greške iz ove faze mogu biti jako skupe u narednim fazama, na primer, nedovoljan opis testa, redudanran test slučaj. Što se pre otkriju takve greške, to ih je lakše rešiti.
U deljem teksu se opisuju dva načina na koji mogu da se unaprede testovi u ovoj fazi testiranja. Prvo se opisuje specifikacija za opis test slučajeva, dalje se predlaze koncept za uklanjanje redudantnih test slučajeva.

Specifikacija test slučajeva koji se testiraju metodom crne kutije

U fazi analize, test slučajevi su neretko formulisani u nekom govoornom jeziku. Uobičajno je da se test slučaj sastoji od preduslova, akcije i očekivanog rezultata. Akcije su podeljene na veći broj koraka koji tester mora da izvrši. Test slučajevi su obično povezani određenim uslovnostima, što je obično zadatko u specifikaciji to test slučaja. I preduslovi i koraci test slučaja se uglavnom čuvaju u odrađenim alatima poput, HP Quality Center, IBM DOORS. Takvi alati omogućavaju praćenje test slučajeva, njihovih razlika i preduslova. Cilj u testiranju metodom crne kutije je da se postigne zacrtana pokrivenost zahteva testovima. Na primer, test slučaj za zaštitu prstiju prilikom zatvaranja prozora, može biti opisan u govornom jeziku. Specifikacija ove funkcionalsnosti se sastoji od, u slučaju da je omogućena zaštita prstiju, detektuje se objekat, prsti, prilikom zatvaranja prozora i zatvaranje prozora se preikida kako ne bi doslo do povrede. Test slučaj ove funkcionalnosti moze se definisati na dva različita načina kao što je pokazano na slici(SLIKA). Najčešći problem prilikom definisanja test slučaja je sam opis test slučaja. Kako se govorni jezik koristi za opis, od testera zavisi kako će test slučcaj biti opisan.
SLIKA 2

Na primer, u prikazanim testovima na slici 2, u opisu jednost testa se nalaze pune rečenice dok kod drugog se nalaze samo stavke. Skraćenice mogu da izazovu probleme, moraju se definisat. U suprotnom test slučaj postaje nedovoljano jasan drugim saradnicima. Postoje mnogi slučajevi gde defincije test slučajeva mogu da se razlikuju ali da se odnose na istu funkcionalnost.

U slučaju da se test slučajevi analiziraju, sledeći aspekti se moraju razmotriti: da li je neka komponenta ili funkcionalnost već pokrivena pokrivena više nego ostale funkcionalnosti, da li postoje redudantnosti među testovima, da li su neki test slučajevi previše komplikovani, da li određeni testovi mogu da se iskombinuju. Ako bi se koristio alat za analiziranje test slučajeva, moglo bi da doje do problema u slučaju da opisi testtova nisu konzistentni. Ovo zahteva da se testovi dizajniraju korišćenjem određenog vokabulara, da sadrže samo određene fraze i unapred definisane strukture. Na primer, potrebno je da test dizajner piše PowerWindow i definise redom preduslove, akcije i očekivani rezultat. Može biti definisano, koliko najviše koraka može jedan test slučaj da sadrži. Potrebo je definisati sve neophodne prekidače, pojlja, parametre i način kakko se oni referišu u opisu test slučaja. Ovo dovodi do uniformisanja test slučajeva. Na kraju, test slučajevi moraju biti podržani od strane korišćenih alata. Ti alati mogu da predlože dizajneru testova, koje parametre da refereiše, gde da ih piše...

Uklanjanje redudansi

Izaziv je rukovati velikim skupom testova prilikom razvoja softvera. Broj test slučajeva se uvećava vremenom, kako novi projekti u kompanije se često baziraju na prethodnim verzijana softvera i koriste proizvode koje su kreirane u drugim projektima \cite{ref18}. Takvi proizvodi mogu biti uslovni, softverske komponente, test slučajevi. Ali ponovno korišćenje može da dovede do redudantnosti među proizvodima. Na primer, razvija se nova verzija sistema, za novi model. Prethodna verzija je imala nekoliko hiljada testova, od kojih većina može biti ponovo korišćena. Testovi se kopiraju u novi projekat ali potrebno je testirati nove funkcionalnosti. Ovo dovodi do toga da se dizajniraju novi testovi. Kako tester ne može da proveri opis i cilj hiljadu starih testova, moguće je da pojedini novi testovi su već pokriveni starim testovima. Ovo može lako da se dogodi u slučaju da više od jednog dizajnera radi na istoj funkcionalnosti.

Redudantnost može da dovede do velike neefikasnosti testiranja kako se jedan isti test slučaj testira nekoliko puta bez promene rezultata. Jedno rešenje jeste da se ne koriste gotovi proizvodi. To bi značilo da testeri moraju da napišu svaki test slučaj od početka. Pa sledi da ovo nije bas efikasan način, zbog velikog broja testova. Potreban je pametniji pristup, pristup koji može da detektuje i otkloni redudantnosti dok u isto vreme omogućava veliku iskorišćenost gotovih proizvoda. Testovi se porede kako bi se našli isti delovi. Ovo zahteva da test slučajevi su napisani na taj način da mogu da se porede. Nakon procesiranja specifikacije test slučaja, redudantni test slučajevi mogu biti obeleženi ili u potpunosti uklonjeni. Kada se piše novi test slučaj, test dizajner može biti direktno upozoren ako je novi test slučan postojećem. 

Implementacija i Egzekucija

Kada su svi testovi opisani, potrebno je da budu i izvršeni. Moguće je da se za testove visokog nivoa moraju implementirati i neke dodatne test skripte. Iako su test slučajevi sistematično opisani i bez redudantnosti, mora se pronaći balans izmedju potencijalno velikog broja dizajniranih testova i veoma ograničenih resursa za testiranje. Glavni izazovi su selekcija test slučajeva koji će biti izvršeni i njihovo sortiranje. Prioritizacija test slučajeva \cite{ref21}\cite{ref19} je neophodna i uglavnom ne mogu svi odabrani testovi biti izvršeni zato što neki testovi moraju biti ručno izvršeni. U proiritizaciji testova, važniji testovi se izvršavaju prvo. Zbog toga se neki ciljevi testiranja postižu ranije, što je poželjno, pogotovu ako ne mogu si odabrani testovi biti testirani. U automobilskoj industriji odobir testova i njihova prioritizacija predstavljaa izazov s obzirom da izvorni kod sistema koje se testira je nepoznat. Takkvo testiranje metodom crne kutije omogućava vrlo ograničene informacije, poput pokrivenosti koda, za razliku od tehnika metode bele kutije.

\begin{thebibliography}{9}
\bibitem{ref1} 
F. Saglietti, “Testing for dependable embedded software,” in 36th EUROMICRO Conference on Software Engineering and Advanced Applications (SEAA). IEEE, 2010, pp. 409–416.
 
\bibitem{ref2} 
K. Grimm, “Software technology in an automotive company: major challenges,” in Proceedings of the 25th International Conference on Software Engineering. IEEE Computer Society, 2003, pp. 498–503.
 
\bibitem{ref3} 
Umar Zakir Abdul, Hamid; et al. (2017). "Autonomous Emergency Braking System with Potential Field Risk Assessment for Frontal Collision Mitigation". 2017 IEEE Conference on Systems, Process and Control (ICSPC). Retrieved 14 March 2018.

\bibitem{ref4}
B. Katumba and E. Knauss, “Agile development in automotive software development: Challenges and opportunities,” in Product-Focused Software Process Improvement. Springer, 2014, pp. 33–47. 

\bibitem{ref5}
F. Fabbrini, M. Fusani, G. Lami, and E. Sivera, “Software engineering in the European automotive industry: Achievements and challenges,” in 32nd Annual IEEE Computer Society International Conference on Computers, Software and Applications(COMPSAC), 2008, pp. 1039–1044.

\bibitem{ref6}
M. Broy, “Automotive software and systems engineering,” in Proceedings of the 3rd ACM and IEEE International Conference on Formal Methods and Models for Co-Design(MEMOCODE), 2005, pp. 143–149. 

\bibitem{ref7}
M. Broy, I. H. Kruger, A. Pretschner, and C. Salzmann, “Engineering automotive software,” Proceedings of IEEE, vol. 95, no. 2, pp. 356–373, 2007. 

\bibitem{ref8}
J. S. Her, S. W. Choi, J. S. Bae, S. D. Kim, and D. W. Cheun, “A component-based process for developing automotive ecu software,” in Product-Focused Software Process Improvement. Springer, 2007, pp. 358– 373.

\bibitem{ref9}
F. Franco, M. Mauro, S. Stevan, A. B. Lugli, and W. Torres, “Modelbased functional safety for the embedded software of automobile power window system,” in 11th IEEE/IAS International Conference on Industry Applications (INDUSCON), 2014, pp. 1–8. 

\bibitem{ref10}
M. Conrad, “Veriﬁcation and validation according to ISO 26262: A workﬂow to facilitate the development of high-integrity software,” Proceedings to 6th European Congress on Embedded Real Time Software and Systems (ERTS2), 2012. 

\bibitem{ref11}
S. S. Barhate, “Eﬀective test strategy for testing automotive software,” in International Conference on Industrial Instrumentation and Control (ICIC). IEEE, 2015, pp. 645–649. 

\bibitem{ref12}
R. Awédikian and B. Yannou, “A practical model-based statistical approach forgeneratingfunctionaltestcases: applicationintheautomotiveindustry,” Software Testing, Veriﬁcation and Reliability, vol. 24, no. 2, pp. 85–123, 2014.

\bibitem{ref13}
A. Kasoju, K. Petersen, and M. V. Mäntylä, “Analyzing an automotive testing process with evidence-based software engineering,” Information and Software Technology, vol. 55, no. 7, pp. 1237–1259, 2013. 

\bibitem{ref14}
D. Sundmark, K. Petersen, and S. Larsson, “An exploratory case study of testing in an automotive electrical system release process,” in 6th IEEE International Symposium on Industrial Embedded Systems (SIES). IEEE, 2011, pp. 166–175. 

\bibitem{ref15}
A. M. Pérez and S. Kaiser, “Top-down reuse for multi-level testing,” in 17th IEEEInternationalConferenceandWorkshopsonEngineeringofComputer Based Systems (ECBS), 2010, pp. 150–159. 

\bibitem{ref16}
J. Kasurinen, 0. Taipale, and K. Smolander. Software Test Automation in Practice: Empirical Observations. Advances in Software Engineering, 2010: 5 71-5 79, 2010. 

\bibitem{ref17}
S. Lity, R. Lachmann, M. Locbau, and I. Schaefer. Delta-oriented 80me Pro: Line Test Models ~ The Body Comfort System Case Study. Technical report, TUBraunschweig, 2013.

\bibitem{ref18}
M. Lochau, S. Lity, R Lachmann, I. Schaefer, and U. Goltz. Delta-oriented model based integration testing of large-scale systems. The Journal of Systems and Software, 91: 63-84, 2014.

\bibitem{ref19}
L. Zhang, D. Han, L. Zhung, G. Rothermel, and H. Mei. Bridging the Gap between the 1 Total and Additional Test-Case Prioritization Strategies. In International Conferenceon Software Engineering, 1091? 2013, 2013

\bibitem{ref20}
R. Lachmann and I. Schaefer. Herausforderungen beim testen von Fahrerassistenzsys temen. In 1st Workshop Automotive Software Engineering (ASE), 2013

\bibitem{ref21}
G. Rothermel, R. H. Untch, C. Chu, and M. J. Harrold. Prioritizing Test Cases For Regression Testing. IEEE Transactions on software engineering, Vol.27 No.10:929-948,2001.

\bibitem{ref22}
C. Kaner. What is a good test case? In Software Ibsting Anabrsis & Review Conference '(STAR) East, 2003.

\bibitem{ref23}
M. Utting and B. Legcard. Practical Model ~ based Testing. Morgan Kaufmann, 2007.

\bibitem{ref24}
M. A. Sindbu and 1c. Meinkc. ms: An lncnemntal Lemming Algorithm for Finite Automata. CoRR, abs / 12062691, 2012.

\bibitem{ref25}
H. Raifelt, B. Stetfen, and T. Margaria. Dynamic Testing via Automate Learning Ew Proceedings of the 3rd International Haifa Verification Conference on Hardware and Sewage Verification and Nesting, HVC 07, pages 136-152. Springer-Veriag, 2008.o Rothermel, R. H Untch c. Chu, null M. J. Hanold. Prioritizing Test Cases For. Regression Testing. IEEE Transactions on Software Engineering, W127 No. 10: 929-1 948, 2001.

\bibitem{ref26}
L.C. Briand. New Applications of Machine Learning and Software Testing. In Quality Software, 2008 QSIC '08. The Eighth International Conference on, pages 33-10, Aug 2008.

\bibitem{ref27}
A R. Lenz, A. P020, and S. R. Vergilio. Linking software testing results with a machine learning approach. Engineering Applications of Artificial Intelligence, 266-6): 1631-1640, 2013.

\bibitem{ref28}
F. A. Barros, L. Neves, E. Hori, and D. Torres. The mCNL: A Controlled Natural Language for Use Case Specifications. In SEKE, pages 250-25 3. Knowledge Systems 1 Institute Graduate School, 201 l. 'L

\bibitem{ref29}
J. Ferret, P. M. Kruse, F. Chicano, and E. Alba. Evolutionary Algorithm for Prioritized Pairwise "Ibst Data Generation. In Proceedings of the 14th Annual Conference on Genetic and Evolutionary Computation, GECCO '12, pages 1213-1220. ACM, 2012.

\bibitem{ref30}
Strobbe with Herramhof, E. Vlachogiannis, and C A Velasoo Test Case Description Language (TCDL): Test Case Metadata for Conformance Evaluation. In ICCHP, pages "(164-171), 2006

\bibitem{ref31}
E. Engstrtim and P. Runeson. Software product line testing A systematic mapping study. Information and Software Technology, 53: 2-13, 201.

\bibitem{ref32}
A. Onyx-cw and R. ReiBig. Optimierte Variantenund Anfordertmgsabdeckung im Test. In Automotive Software Engineering Hbrkshop. 43. G] Jahmstagung, 2013

\bibitem{ref33}
MF Johansen, (3. Haugen, and F. Fleurey. An algorithm for generating t-wise covering arrays from large feature models. In SPLC, pages 46-55, 2012.

\bibitem{ref34}
L. Briand, Y. Labiche, and Z. Bawar. Using the Machine [taming to Retine Blog-Box] Test Specifications and Test Suites. In Quality Software, 2008. QSIC 08. The Eighth International Conference, pages 135-144, Aug 2008. 

\bibitem{ref35}
B. Engstrom, P. Runeson, and M. Skoglund. A systematic review on regression test selection techniques. Information and Software Technology, 52: 14-30, 2010.

\end{thebibliography}
\end{document}
